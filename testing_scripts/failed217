
# edoi_reference_list = edoi_company_lists[0]

# def normalize_and_merge(df_company_list_a, df_company_list_b, df_company_list_a_identifier, df_company_list_b_identifier, score_cutoff=85):
#     matcher = NameMatcher(
#     number_of_matches=1,
#     top_n=10,
#     lowercase=True,
#     punctuations=True,
#     remove_ascii=True,
#     legal_suffixes=True,
#     common_words=False,
#     verbose=True)

#     # adjust the distance metrics to use
#     # matcher.set_distance_metrics(['bag', 'typo', 'refined_soundex', 'discounted_levenshtein'])
#     matcher.set_distance_metrics(['discounted_levenshtein',
#                                 'SSK', 
#                                 'fuzzy_wuzzy_token_sort'])

#     # load the data to which the names should be matched
#     matcher.load_and_process_master_data(column=df_company_list_a_identifier,
#                                         df_matching_data=df_company_list_a, 
#                                         transform=True)

#     # perform the name matching on the data you want matched
#     matches = matcher.match_names(to_be_matched=df_company_list_b, 
#                                 column_matching=df_company_list_b_identifier)

#     matches = matches[matches['score'] >= score_cutoff]


#     # combine the datasets based on the matches
#     print(matches)
#     combined = pd.merge(df_company_list_a, matches, how='left', left_index=True, right_on='match_index')
#     combined = pd.merge(combined, df_company_list_b, how='left', left_index=True, right_index=True)

#     return {combined : edoi_reference_list.values()}

# test = normalize_and_merge(newsweek_most_responsible, fortune_100_best_companies_to_work_for, 'COMPANY', 'NAME')
# test2 = normalize_and_merge(test, just_capitals_just_100, 'COMPANY', 'Company')
# print(test)

# # print(edoi_reference_list.values())

# # df_companies_a = newsweek_most_responsible
# # df_companies_b = fortune_100_best_companies_to_work_for


# # matcher = NameMatcher(
# #     number_of_matches=1,
# #     top_n=10,
# #     lowercase=True,
# #     punctuations=True,
# #     remove_ascii=True,
# #     legal_suffixes=True,
# #     common_words=False,
# #     verbose=True)

# # # adjust the distance metrics to use
# # # matcher.set_distance_metrics(['bag', 'typo', 'refined_soundex', 'discounted_levenshtein'])
# # matcher.set_distance_metrics(['discounted_levenshtein',
# #                               'SSK', 
# #                               'fuzzy_wuzzy_token_sort'])

# # # load the data to which the names should be matched
# # matcher.load_and_process_master_data(column='COMPANY',
# #                                      df_matching_data=df_companies_a, 
# #                                      transform=True)

# # # perform the name matching on the data you want matched
# # matches = matcher.match_names(to_be_matched=df_companies_b, 
# #                               column_matching='NAME')

# # matches = matches[matches['score'] >= 85]


# # # combine the datasets based on the matches
# # print(matches)
# # combined = pd.merge(df_companies_a, matches, how='left', left_index=True, right_on='match_index')
# # combined = pd.merge(combined, df_companies_b, how='left', left_index=True, right_index=True)
# # print(combined)
# # combined.to_csv("2_17_output.csv", index=False)
